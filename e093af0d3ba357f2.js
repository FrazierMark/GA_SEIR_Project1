import"../css/main.css";import*as THREE from"three";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import*as dat from"lil-gui";import vShader from"../../public/shaders/vShader.glsl";import fShader from"../../public/shaders/fShader.glsl";import soundTrack from"../../public/audio/synth1.mp3";import redTrack from"../../public/audio/redTrack.mp3";import yellowTrack from"../../public/audio/yellowTrack.mp3";import winTone from"../../public/audio/winTone.mp3";import drawTone from"../../public/audio/drawTone.mp3";document.addEventListener("DOMContentLoaded",(function(){init()}),!1);const player1_TurnToken=document.querySelector(".player1_token"),player2_TurnToken=document.querySelector(".player2_token"),musicBtn=document.querySelector(".music"),startResetBtn=document.querySelector(".start_reset"),winLoseDrawMsg=document.querySelector(".win_lose_draw"),column0=document.getElementsByClassName("column0"),column1=document.getElementsByClassName("column1"),column2=document.getElementsByClassName("column2"),column3=document.getElementsByClassName("column3"),column4=document.getElementsByClassName("column4"),column5=document.getElementsByClassName("column5"),column6=document.getElementsByClassName("column6"),allColumns=[column0,column1,column2,column3,column4,column5,column6];let gameBoard=[],winner=!1,draw=!1,player1_Turn=!0,player2_Turn=!1;const rowHeight=6,columnLength=7;let lastColumnClicked=[],soundTrackPlaying=!1,music=new Audio(soundTrack);music.loop=!0,music.volume=.7,playMusic();let yellowSound=new Audio(yellowTrack);yellowSound.loop=!1,yellowSound.volume=.3;let redSound=new Audio(redTrack);redSound.loop=!1,redSound.volume=.3;let winSound=new Audio(winTone);winSound.loop=!1,winSound.volume=.5;let drawSound=new Audio(drawTone);drawSound.loop=!1,drawSound.volume=.5,startResetBtn.addEventListener("click",init),musicBtn.addEventListener("click",playMusic);for(const e of allColumns)for(const a of e)a.addEventListener("click",dropToken);function init(e){startResetBtn.innerText="Restart Game?",clearGameBoard();for(let e=0;e<6;e++)gameBoard.push(new Array(7).fill(0))}function dropToken(e){let a=getAvailableSlot(getCellIdx(e)[1]);gameBoard[a[0]][a[1]]=checkPlayerTurn(),lastColumnClicked=[a[0],a[1]],render()}function render(){updateDomGameBoard(),updateTurn(),winLoseDrawMsg.innerText=displayEndMessage(checkWinner(),checkDraw()),1!=winner&&1!=draw||(winLoseDrawMsg.classList.remove("endGameMsgDisable"),playSoundFX(),startResetBtn.innerText="Play again?")}function updateDomGameBoard(){let e=[`row${lastColumnClicked[0]}`,`column${lastColumnClicked[1]}`],a=document.getElementsByClassName(`${e[0]} ${e[1]}`);player1_Turn?a[0].classList.add("red"):a[0].classList.add("yellow"),playSoundFX()}function displayEndMessage(e,a){if(e){if(1==e[0])return highlightWinner(e),"Player 1 WINS!!";if(-1==e[0])return highlightWinner(e),"Player 2 WINS!!"}else if(a)return"DRAW! Play again?"}function checkDraw(){let e=[];for(let a=5;a>-1;a--)for(let r=6;r>-1;r--)e.push(gameBoard[a][r]);return!e.includes(0)&&0==winner&&(draw=!0,!0)}function checkWinner(){for(let e=0;e<6;e++)for(let a=0;a<4;a++)if(gameBoard[e][a]+gameBoard[e][a+1]+gameBoard[e][a+2]+gameBoard[e][a+3]==-4||gameBoard[e][a]+gameBoard[e][a+1]+gameBoard[e][a+2]+gameBoard[e][a+3]==4)return winner=!0,[gameBoard[e][a],`${e}${a}`,`${e}${a+1}`,`${e}${a+2}`,`${e}${a+3}`];for(let e=0;e<3;e++)for(let a=0;a<7;a++)if(gameBoard[e][a]+gameBoard[e+1][a]+gameBoard[e+2][a]+gameBoard[e+3][a]==-4||gameBoard[e][a]+gameBoard[e+1][a]+gameBoard[e+2][a]+gameBoard[e+3][a]==4)return winner=!0,[gameBoard[e][a],`${e}${a}`,`${e+1}${a}`,`${e+2}${a}`,`${e+3}${a}`];for(let e=3;e<6;e++)for(let a=0;a<5;a++)if(gameBoard[e][a]+gameBoard[e-1][a+1]+gameBoard[e-2][a+2]+gameBoard[e-3][a+3]==-4||gameBoard[e][a]+gameBoard[e-1][a+1]+gameBoard[e-2][a+2]+gameBoard[e-3][a+3]==4)return winner=!0,[gameBoard[e][a],`${e}${a}`,`${e-1}${a+1}`,`${e-2}${a+2}`,`${e-3}${a+3}`];for(let e=0;e<3;e++)for(let a=0;a<5;a++)if(gameBoard[e][a]+gameBoard[e+1][a+1]+gameBoard[e+2][a+2]+gameBoard[e+3][a+3]==-4||gameBoard[e][a]+gameBoard[e+1][a+1]+gameBoard[e+2][a+2]+gameBoard[e+3][a+3]==4)return winner=!0,[gameBoard[e][a],`${e}${a}`,`${e+1}${a+1}`,`${e+2}${a+2}`,`${e+3}${a+3}`]}function highlightWinner(e){e.shift(),e.forEach((e=>{let a=[`row${e[0]}`,`column${e[1]}`];document.getElementsByClassName(`${a[0]} ${a[1]} `)[0].classList.add("winningHighlight")}))}function clearGameBoard(){gameBoard=[],winner=!1,draw=!1,lastColumnClicked=[],winLoseDrawMsg.classList.contains("endGameMsgDisable")||winLoseDrawMsg.classList.add("endGameMsgDisable"),startResetBtn.innerText="Restart Game?";for(const e of allColumns)for(const a of e)a.classList.remove("yellow"),a.classList.remove("red"),a.classList.remove("winningHighlight")}function getAvailableSlot(e){for(let a=5;a>-1;a--)if(0==gameBoard[a][e])return[a,e];alert("Column full, dummy.")}function getCellIdx(e){const a=e.target.classList,r=a[1],n=a[2];return[parseInt(r[3]),parseInt(n[6])]}function checkPlayerTurn(){return 1==player1_Turn?1:-1}function updateTurn(){1==player1_Turn?(player1_Turn=!1,player1_TurnToken.classList.remove("red"),player2_Turn=!0,player2_TurnToken.classList.add("yellow")):(player2_Turn=!1,player2_TurnToken.classList.remove("yellow"),player1_Turn=!0,player1_TurnToken.classList.add("red"))}function playMusic(){0==soundTrackPlaying?(console.log("playing??"),music.load(),music.play().then((()=>{soundTrackPlaying=!0})).catch((e=>{console.log(e)}))):1==soundTrackPlaying&&(music.pause(),soundTrackPlaying=!1)}function playSoundFX(){1==player1_Turn&&0==winner?(redSound.load(),redSound.play().then((()=>{})).catch((e=>{console.log(e)}))):1==player2_Turn&&0==winner?(yellowSound.load(),yellowSound.play().then((()=>{})).catch((e=>{console.log(e)}))):1==winner?(winSound.load(),winSound.play().then((()=>{})).catch((e=>{console.log(e)}))):1==draw&&(drawSound.load(),drawSound.play().then((()=>{})).catch((e=>{console.log(e)})))}const canvas=document.querySelector("canvas.webgl"),gui=new dat.GUI({width:200}),scene=new THREE.Scene,parameters={count:10500,size:.022,radius:5,forks:13,curve:1,randomness:1.2,randomPower:8,innerColor:"#00ffb3",outerColor:"#f1f514"};let geometry=null,material=null,particles=null;const generateParticleFormation=()=>{null!==particles&&(geometry.dispose(),material.dispose(),scene.remove(particles)),geometry=new THREE.BufferGeometry;const e=new Float32Array(3*parameters.count),a=new Float32Array(3*parameters.count),r=new Float32Array(3*parameters.count),n=new THREE.Color(parameters.innerColor),o=new THREE.Color(parameters.outerColor),t=new Float32Array(1*parameters.count);for(let i=0;i<parameters.count;i++){const l=3*i,s=Math.random()*parameters.radius,m=i%parameters.forks/parameters.forks*Math.PI*2,d=s*parameters.curve,c=Math.pow(Math.random(),parameters.randomPower)*(Math.random()<.5?1:-1)*parameters.randomness*s,u=Math.pow(Math.random(),parameters.randomPower)*(Math.random()<.5?1:-1)*parameters.randomness*s,p=Math.pow(Math.random(),parameters.randomPower)*(Math.random()<.5?1:-1)*parameters.randomness*s;e[l]=Math.cos(m)*s*-d,e[l+1]=2*Math.sin(m),e[l+2]=Math.sin(m)*s*d,r[l]=c,r[l+1]=u,r[l+2]=p;const g=n.clone();g.lerp(o,s/parameters.radius),a[l]=g.r,a[l+1]=g.g,a[l+2]=g.b,t[i]=Math.random()}geometry.setAttribute("position",new THREE.BufferAttribute(e,3)),geometry.setAttribute("color",new THREE.BufferAttribute(a,3)),geometry.setAttribute("aScale",new THREE.BufferAttribute(t,1)),geometry.setAttribute("aRandomness",new THREE.BufferAttribute(r,3)),material=new THREE.ShaderMaterial({depthWrite:!1,blending:THREE.AdditiveBlending,vertexColors:!0,uniforms:{uTime:{value:0},uSize:{value:35*renderer.getPixelRatio()}},vertexShader:vShader,fragmentShader:fShader}),particles=new THREE.Points(geometry,material),scene.add(particles)},windowSize={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{windowSize.width=window.innerWidth,windowSize.height=window.innerHeight,camera.aspect=windowSize.width/windowSize.height,camera.updateProjectionMatrix(),renderer.setSize(windowSize.width,windowSize.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const camera=new THREE.PerspectiveCamera(75,windowSize.width/windowSize.height,.1,100);camera.position.x=0,camera.position.y=0,camera.position.z=.897,scene.add(camera);const controls=new OrbitControls(camera,canvas);controls.enableDamping=!0;const particleParameters=gui.addFolder("Particle Parameters");particleParameters.close(),particleParameters.add(parameters,"count").min(100).max(1e6).step(100).onFinishChange(generateParticleFormation),particleParameters.add(parameters,"radius").min(.01).max(22).step(.01).onFinishChange(generateParticleFormation),particleParameters.add(parameters,"curve").min(-5).max(5).step(.001).onFinishChange(generateParticleFormation),particleParameters.add(parameters,"forks").min(1).max(20).step(1).onFinishChange(generateParticleFormation),particleParameters.add(parameters,"randomness").min(0).max(10).step(.001).onFinishChange(generateParticleFormation),particleParameters.add(parameters,"randomPower").min(1).max(10).step(.001).onFinishChange(generateParticleFormation),particleParameters.addColor(parameters,"innerColor").onFinishChange(generateParticleFormation),particleParameters.addColor(parameters,"outerColor").onFinishChange(generateParticleFormation);const cameraFolder=gui.addFolder("Camera");cameraFolder.add(camera.position,"x").min(0).max(15).step(.001),cameraFolder.add(camera.position,"y").min(0).max(15).step(.001),cameraFolder.add(camera.position,"z").min(.01).max(15).step(.001),cameraFolder.close();const renderer=new THREE.WebGLRenderer({canvas});renderer.setSize(windowSize.width,windowSize.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),generateParticleFormation();const clock=new THREE.Clock,frame=()=>{const e=clock.getElapsedTime();material.uniforms.uTime.value=.2*e,controls.update(),renderer.render(scene,camera),window.requestAnimationFrame(frame)};frame();